import math
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from bot.utils import db
from bot.keyboards.pagination_kb import get_pagination_kb

router = Router()
PAGE_SIZE = 5

async def format_ad_message(ad):
    # ad: (id, title, description, price, contact, photo_id, is_top)
    top_icon = "üëë " if ad[6] else ""
    return (
        f"{top_icon}<b>{ad[1]}</b>\n\n"
        f"<i>{ad[2]}</i>\n\n"
        f"<b>–ë–∞“ì–∞—Å—ã:</b> {ad[3]}\n"
        f"<b>–ë–∞–π–ª–∞–Ω—ã—Å:</b> {ad[4]}"
    )

async def show_ads_page(message: Message, page: int = 1):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    if not user or not user[4]:
        await message.answer("–ê–ª–¥—ã–º–µ–Ω ¬´üèôÔ∏è “ö–∞–ª–∞–Ω—ã ”©–∑–≥–µ—Ä—Ç—É¬ª –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã–ø, “õ–∞–ª–∞“£—ã–∑–¥—ã —Ç–∞“£–¥–∞“£—ã–∑.")
        return

    city = user[4]
    ads, total_ads = await db.get_ads_by_city_paginated(city, page, PAGE_SIZE)

    if not ads:
        await message.answer(f"<b>{city}</b> “õ–∞–ª–∞—Å—ã –±–æ–π—ã–Ω—à–∞ ”ô–∑—ñ—Ä–≥–µ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä –∂–æ“õ.")
        return

    total_pages = math.ceil(total_ads / PAGE_SIZE)
    
    response_text = f"<b>{city}</b> “õ–∞–ª–∞—Å—ã –±–æ–π—ã–Ω—à–∞ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä (–ë–µ—Ç {page}/{total_pages}):\n\n"
    response_text += "\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n".join([await format_ad_message(ad) for ad in ads])

    keyboard = get_pagination_kb(page, total_pages, city)

    # –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–¥—ã –∂–∞“£–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ —Ä–µ—Ç—ñ–Ω–¥–µ –∂—ñ–±–µ—Ä—É
    await message.answer(response_text, reply_markup=keyboard)


# --- –ñ–ê“¢–ê –•–ï–ù–î–õ–ï–† ---
# /start –∫–µ–∑—ñ–Ω–¥–µ–≥—ñ "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä–¥—ã –∫”©—Ä—É" –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã–ø –∞–ª–∞–¥—ã
@router.callback_query(F.data == "view_ads_on_start")
async def view_ads_on_start_handler(callback: CallbackQuery):
    await callback.message.delete() # "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä–¥—ã –∫”©—Ä—É" –±–∞—Ç—ã—Ä–º–∞—Å—ã –±–∞—Ä —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©—à—ñ—Ä–µ–º—ñ–∑
    await show_ads_page(callback.message)
    await callback.answer()


@router.message(F.text == "üîç –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä–¥—ã –∫”©—Ä—É")
async def view_all_ads_handler(message: Message):
    await show_ads_page(message)

# –ë–µ—Ç—Ç—ñ –∞—É—ã—Å—Ç—ã—Ä—É –ª–æ–≥–∏–∫–∞—Å—ã (”©–∑–≥–µ—Ä–µ–¥—ñ)
@router.callback_query(F.data.startswith("page_"))
async def pagination_handler(callback: CallbackQuery):
    page = int(callback.data.split("_")[1])
    # –ï–Ω–¥—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©“£–¥–µ–π–º—ñ–∑ (edit), –∂–∞“£–∞–¥–∞–Ω –∂—ñ–±–µ—Ä–º–µ–π–º—ñ–∑
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    city = user[4]
    ads, total_ads = await db.get_ads_by_city_paginated(city, page, PAGE_SIZE)
    total_pages = math.ceil(total_ads / PAGE_SIZE)
    
    response_text = f"<b>{city}</b> “õ–∞–ª–∞—Å—ã –±–æ–π—ã–Ω—à–∞ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä (–ë–µ—Ç {page}/{total_pages}):\n\n"
    response_text += "\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n".join([await format_ad_message(ad) for ad in ads])
    
    keyboard = get_pagination_kb(page, total_pages, city)
    
    try:
        await callback.message.edit_text(response_text, reply_markup=keyboard)
    except Exception:
        pass # –ï–≥–µ—Ä —Ç–µ–∫—Å—Ç ”©–∑–≥–µ—Ä–º–µ—Å–µ, “õ–∞—Ç–µ —à—ã“ì–∞—Ä–º–∞–π–¥—ã
    
    await callback.answer()

@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    await callback.answer()
